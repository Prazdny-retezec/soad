import os

from fastapi import FastAPI, Depends, HTTPException, status
from fastapi.security import HTTPBasic, HTTPBasicCredentials
from fastapi.openapi.docs import get_swagger_ui_html, get_redoc_html
from fastapi.responses import HTMLResponse

from measurement.router import router as measurement_router
from labview.router import router as labview_router
from database import Base, engine
from scheduler import scheduler
from settings import AppSettings
from fastapi.middleware.cors import CORSMiddleware

description = """
Syst√©m SOAD slou≈æ√≠ k synchronizaci a spr√°vƒõ obrazov√Ωch a akustick√Ωch dat. üöÄ

## Funkcionalita syst√©mu

1. **Z√≠sk√°v√°n√≠ dat ze senzor≈Ø** ‚Äì Syst√©m sb√≠r√° data z r≈Øzn√Ωch typ≈Ø senzor≈Ø, vƒçetnƒõ akustick√Ωch za≈ô√≠zen√≠ a kamer (RGB, multispektr√°ln√≠ch).
2. **Ukl√°d√°n√≠ dat** ‚Äì Nasb√≠ran√° data jsou nejprve ukl√°d√°na lok√°lnƒõ a n√°slednƒõ synchronizov√°na do centr√°ln√≠ho √∫lo≈æi≈°tƒõ.
3. **Transformace dat** ‚Äì Data jsou automaticky p≈ôev√°dƒõna do vhodn√Ωch form√°t≈Ø jako PNG nebo TIFF.
4. **Automatick√© mƒõ≈ôen√≠** ‚Äì Syst√©m podporuje automatick√© spu≈°tƒõn√≠ mƒõ≈ôen√≠ na z√°kladƒõ krit√©ri√≠ jako je ƒças nebo ud√°lost.
5. **Webov√° administrace** ‚Äì Poskytuje u≈æivatelsk√© rozhran√≠ pro konfiguraci syst√©mu a pl√°nov√°n√≠ mƒõ≈ôen√≠.

## Measurement

Zde naleznete operace pro vytv√°≈ôen√≠, aktualizaci, pl√°nov√°n√≠ a maz√°n√≠ mƒõ≈ôen√≠, vƒçetnƒõ podpory periodick√Ωch mƒõ≈ôen√≠.

## Auth

You will be able to:

* **Login** (_not implemented_).
"""

# BE application instance
app = FastAPI(
    title="Soad",
    description=description,
    summary="Synchronizace obrazov√Ωch a akustick√Ωch dat.",
    version="1.0.0",
    contact={
        "name": "Pr√°zdn√Ω ≈ôetƒõzec",
        "url": "https://github.com/Prazdny-retezec",
    },
    license_info={
        "name": "MIT License",
        "url": "https://opensource.org/licenses/MIT",
    },
    docs_url=None,
    redoc_url=None,
    openapi_url=None,
)

# CORS
origins = ["http://localhost:5000", ]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# security
security = HTTPBasic()

def require_basic_auth(
    credentials: HTTPBasicCredentials = Depends(security),
):

    user = os.getenv("AUTH_USER")
    pw   = os.getenv("AUTH_PASSWORD")
    print(user,pw)
    if not (secrets.compare_digest(credentials.username, user)
            and secrets.compare_digest(credentials.password, pw)):
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Unauthorized",
            headers={"WWW-Authenticate": "Basic"},
        )

# registration of routers
app.include_router(measurement_router, dependencies=[Depends(require_basic_auth)])
app.include_router(labview_router)

@app.get(
    "/docs",
    response_class=HTMLResponse,
    dependencies=[Depends(require_basic_auth)],
    include_in_schema=False,
)
def swagger_docs():
    return get_swagger_ui_html(
        openapi_url="/openapi.json",
        title="Secure API Docs"
    )

@app.get(
    "/redoc",
    response_class=HTMLResponse,
    dependencies=[Depends(require_basic_auth)],
    include_in_schema=False,
)
def redoc_docs():
    return get_redoc_html(
        openapi_url="/openapi.json",
        title="Secure ReDoc"
    )

@app.get(
    "/openapi.json",
    dependencies=[Depends(require_basic_auth)],
    include_in_schema=False,
)
def openapi_json():
    return app.openapi()

# TODO replace by non-deprecated feature
@app.on_event("startup")
def on_startup():
    settings = AppSettings()

    # create database if not exists
    create_db_and_tables()

    #  check directory for saving data exists and create one if it does not
    if not os.path.exists(settings.output_dir):
        os.mkdir(settings.output_dir)

    print(f"[DEBUG] AUTH_USER={os.getenv("AUTH_USER")!r}, AUTH_PASSWORD={os.getenv("AUTH_PASSWORD")!r}")
    # start task scheduler
    scheduler.start()


def create_db_and_tables():
    """
    DDL of database

    TODO replace with migration?
    """
    Base.metadata.create_all(bind=engine)
